<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="V1" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS Customer(NationalId VARCHAR ,ProspectConvert INTEGER ,DsrPhone VARCHAR ,FirstName VARCHAR ,LastName VARCHAR ,Phone VARCHAR ,Channel INTEGER ,SyncStatus INTEGER,RequestId VARCHAR(36) ,Id VARCHAR(36) primary key not null ,DateCreated datetime , DateUpdated datetime , TypeOfPhotoBeingTaken INTEGER);

CREATE TABLE IF NOT EXISTS CustomerProduct(CustomerId VARCHAR(36) ,ProductTypeId VARCHAR(36) ,DisplayName VARCHAR, productName VARCHAR ,SerialNumber VARCHAR, DateAcquired VARCHAR, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS CustomerRegistrationStepsStatus(RequestStatus INTEGER ,CustomerId VARCHAR(36) ,ProductId VARCHAR(36), StepName VARCHAR ,StepNumber INTEGER, StepStatus VARCHAR, CustomerStatusId VARCHAR(36) ,AdditionalInfo VARCHAR, Id VARCHAR(36) primary key not null , DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS DataCache(Key VARCHAR,Value VARCHAR, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime);

CREATE TABLE IF NOT EXISTS DownSyncTracker(Entity VARCHAR, ServerTimestamp VARCHAR,IsInitial INTEGER, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS DsrProfile(DsrPhone VARCHAR, OfflineLoginAttempts INTEGER, LastOnlineLogin datetime, LastOfflineLogin datetime, PinHash VARCHAR, FirstName VARCHAR, LastName VARCHAR, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS DsrRankInfo(IsMe INTEGER, Name VARCHAR, Sales INTEGER, Rank INTEGER, Period INTEGER not null, Region INTEGER not null, TimeStamp datetime, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS DsrUnitsInfo(`Date` datetime, NewAcquired INTEGER, StartedWith INTEGER, Removed INTEGER, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime);

CREATE TABLE IF NOT EXISTS SalesAppNotification(Entity VARCHAR, EntityId VARCHAR, NotificationTag VARCHAR, NotificationStatus INTEGER, NotificationType INTEGER, NotificiationTime datetime, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime);

CREATE TABLE IF NOT EXISTS Message(`From` VARCHAR, Subject VARCHAR,Body VARCHAR, MessageDate datetime, ExpiryDate datetime, IsRead INTEGER, MessageId INTEGER, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS OtaSetting(Name VARCHAR, GroupName VARCHAR, Value VARCHAR, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS Permission(PermissionId INTEGER, Name VARCHAR, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS Product(ProductTypeId VARCHAR(36), DisplayName VARCHAR, productName VARCHAR, SerialNumber VARCHAR, DateAcquired VARCHAR, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS Prospect(`Money` INTEGER, Authority INTEGER, Need INTEGER, ReminderTime datetime, Converted INTEGER, DsrPhone VARCHAR, FirstName VARCHAR, LastName VARCHAR, Phone VARCHAR, SyncStatus INTEGER, RequestId VARCHAR(36), Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS ProspectFollowup(ProspectId VARCHAR(36), ReminderTime datetime, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS ProspectProduct(ProspectId VARCHAR(36), ProductTypeId VARCHAR(36), DisplayName VARCHAR, productName VARCHAR, SerialNumber VARCHAR, DateAcquired VARCHAR, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS RankingSummarized(Area VARCHAR, DsrRank INTEGER, TotalDsrs INTEGER, Level INTEGER, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS Stat(`Date` datetime, Sales INTEGER, Prospects INTEGER, StatHeaderId VARCHAR(36), Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS StatHeader(Period INTEGER, UserId VARCHAR(36), `From` datetime, `To` datetime, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS SyncRecord(ModelType VARCHAR, RequestId VARCHAR(36), Status INTEGER, StatusMessage VARCHAR, SyncAttemptCount INTEGER, ModelId VARCHAR(36), Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime );

CREATE TABLE IF NOT EXISTS CustomerPhoto(PhotoType INTEGER, Status INTEGER, FilePath VARCHAR, TypeOfPhoto INTEGER, PhotoStatus INTEGER, CustomerIdentifier VARCHAR, Id VARCHAR(36) primary key not null, DateCreated datetime , DateUpdated datetime);

CREATE INDEX IF NOT EXISTS CustomerRegistrationStepsStatus_CustomerId on CustomerRegistrationStepsStatus(CustomerId);

CREATE INDEX IF NOT EXISTS CustomerRegistrationStepsStatus_ProductId on CustomerRegistrationStepsStatus(ProductId);

CREATE INDEX IF NOT EXISTS Stat_StatHeaderId on Stat(StatHeaderId);

CREATE UNIQUE INDEX IF NOT EXISTS UniqueSetting on OtaSetting(GroupName, Name);</value>
  </data>
  <data name="V2" xml:space="preserve">
    <value>ALTER TABLE Customer ADD COLUMN AccountStatus VARCHAR;

CREATE TABLE IF NOT EXISTS DsrTicket(DateRaised varchar, Status integer, Description varchar, Issue varchar, RefNo varchar, Id varchar(36) primary key, DateCreated datetime, DateUpdated datetime);

CREATE TABLE IF NOT EXISTS CustomerTicket(CustomerName varchar , CustomerPhone varchar , Product varchar , DateRaised varchar , Status integer , Description varchar, Issue varchar, RefNo varchar , Id varchar(36) primary key , DateCreated datetime , DateUpdated datetime);</value>
  </data>
  <data name="V3" xml:space="preserve">
    <value>ALTER TABLE Customer ADD COLUMN RegistrationId VARCHAR(36);ALTER TABLE Prospect ADD COLUMN NationalId VARCHAR;</value>
  </data>
  <data name="V4" xml:space="preserve">
    <value>ALTER TABLE CustomerPhoto ADD COLUMN PhotoUploadStatus INTEGER;
ALTER TABLE CustomerPhoto ADD COLUMN Phone VARCHAR;</value>
  </data>
  <data name="V5" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS Chamas(Id VARCHAR(36) PRIMARY KEY NOT NULL ,DateCreated DATETIME , DateUpdated DATETIME, Package TEXT NOT NULL, ServerTimeStamp DATETIME);ALTER TABLE Customer ADD COLUMN Groups VARCHAR;ALTER TABLE Prospect ADD COLUMN Groups VARCHAR;</value>
  </data>
</root>