{"Name":"Rounded Image View","Id":2124,"Alias":"RoundedImageView","Description":"\n\u003ciframe src=\"https://appetize.io/embed/b9knv620997np08wtr2cgetmu0?device=nexus5\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\" \n        width=\"300px\" height=\"597px\" frameborder=\"0\" scrolling=\"no\"\n        style=\"float:right;margin-left:1em;\"\u003e\u003c/iframe\u003e\n\nA fast ImageView (and Drawable) that supports rounded corners with many more advanced\nfeatures like support for ovals, rounded rectangles, ScaleTypes and TileModes.\n\n## Usage\n\nA `RoundedImageView` provides many advantages over a traditional `ImageView`, and can easily \nbe added to your layout instead of `ImageView`:\n\n    \u003ccom.makeramen.roundedimageview.RoundedImageView\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/imageView1\"\n        android:src=\"@drawable/photo1\"\n        android:scaleType=\"fitCenter\"\n        app:riv_corner_radius=\"30dip\"\n        app:riv_border_width=\"2dip\"\n        app:riv_border_color=\"#333333\"\n        app:riv_mutate_background=\"true\"\n        app:riv_tile_mode=\"repeat\"\n        app:riv_oval=\"true\" /\u003e\n        \nThis view can also be constructed in code:\n\n    RoundedImageView riv = new RoundedImageView(context);\n    riv.SetScaleType(ImageView.ScaleType.CenterCrop);\n    riv.CornerRadius = 10;\n    riv.BorderWidth = 2;\n    riv.BorderColor = Color.DarkGray;\n    riv.MutatesBackground = true;\n    riv.SetImageDrawable(drawable);\n    riv.SetBackground(backgroundDrawable);\n    riv.IsOval = true;\n    riv.TileModeX = Shader.TileMode.Repeat;\n    riv.TileModeY = Shader.TileMode.Repeat;\n\n## Compatibility\n\nSince `RoundedImageView` is a direct extension of `ImageView`, it seamlessly works \nout-the-box with your favorite image loader library, such as Picasso:\n\n    var transformation = new RoundedTransformationBuilder()\n        .BorderColor(Color.Black)\n        .BorderWidthDp(3)\n        .CornerRadiusDp(30)\n        .Oval(false)\n        .Build();\n\n    Picasso.With(context)\n        .Load(url)\n        .Fit()\n        .Transform(transformation)\n        .Into(imageView);\n\n","Version":"2.2.0","Summary":"A fast ImageView (and Drawable) that supports rounded corners (and ovals or circles).","QuickStart":"\nA fast ImageView (and Drawable) that supports rounded corners with many more advanced\nfeatures like support for ovals, rounded rectangles, ScaleTypes and TileModes.\n\n## Usage\n\nA `RoundedImageView` provides many advantages over a traditional `ImageView`, and can easily \nbe added to your layout instead of `ImageView`:\n\n    \u003ccom.makeramen.roundedimageview.RoundedImageView\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/imageView1\"\n        android:src=\"@drawable/photo1\"\n        android:scaleType=\"fitCenter\"\n        app:riv_corner_radius=\"30dip\"\n        app:riv_border_width=\"2dip\"\n        app:riv_border_color=\"#333333\"\n        app:riv_mutate_background=\"true\"\n        app:riv_tile_mode=\"repeat\"\n        app:riv_oval=\"true\" /\u003e\n        \nThis view can also be constructed in code:\n\n    RoundedImageView riv = new RoundedImageView(context);\n    riv.SetScaleType(ImageView.ScaleType.CenterCrop);\n    riv.CornerRadius = 10;\n    riv.BorderWidth = 2;\n    riv.BorderColor = Color.DarkGray;\n    riv.MutatesBackground = true;\n    riv.SetImageDrawable(drawable);\n    riv.SetBackground(backgroundDrawable);\n    riv.IsOval = true;\n    riv.TileModeX = Shader.TileMode.Repeat;\n    riv.TileModeY = Shader.TileMode.Repeat;\n\n## Compatibility\n\nSince `RoundedImageView` is a direct extension of `ImageView`, it seamlessly works \nout-the-box with your favorite image loader library, such as Picasso:\n\n    var transformation = new RoundedTransformationBuilder()\n        .BorderColor(Color.Black)\n        .BorderWidthDp(3)\n        .CornerRadiusDp(30)\n        .Oval(false)\n        .Build();\n\n    Picasso.With(context)\n        .Load(url)\n        .Fit()\n        .Transform(transformation)\n        .Into(imageView);\n\n","Hash":"79c3ac100599a33ef5afe3c1d5810d3b","TargetPlatforms":["android"],"TrialHash":null}